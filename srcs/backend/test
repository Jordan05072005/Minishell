.:$
.$
..$
backend.c$
backend.h$
backend.o$
exec$
icmds$
io$
Makefile$
minishell$
path$
test$
$
./exec:$
.$
..$
exec_child.c$
exec_child.o$
exec_parent.c$
exec_parent.o$
exec_proc.c$
exec_proc.o$
$
./icmds:$
.$
..$
init_icmd.c$
init_icmd.o$
init_icmds.c$
init_icmds.o$
zero_icmds.c$
zero_icmds.o$
$
./io:$
.$
..$
close_fd.c$
close_fd.o$
here_doc.c$
here_doc.o$
pipe.c$
pipe.o$
set_io.c$
set_io.o$
$
./path:$
.$
..$
get_path.c$
get_path.o$
#this is a temp Makefile$
$
MAKEFLAGS += --no-print-directory$
$
NAME = minishell$
CC = cc$
FLAGS = -Wall -Wextra -Werror -g#Has -g flag, watch out !$
RM = rm -f$
$
LIBFT_DIR = ../../libft$
LIBFT = $(LIBFT_DIR)/libft.a$
$
EXEC =	exec_child.c	exec_parent.c	exec_proc.c$
$
ICMDS =	init_icmd.c		init_icmds.c	zero_icmds.c$
$
IO =	close_fd.c		here_doc.c		pipe.c			\$
		set_io.c$
$
PTH =	get_path.c$
$
MINI_SRC =	$(addprefix exec/, $(EXEC))		\$
			$(addprefix icmds/, $(ICMDS))	\$
			$(addprefix io/, $(IO))			\$
			$(addprefix path/, $(PTH))		\$
			backend.c$
$
$
# MINI_SRC =	$(addprefix srcs/backend/, $(MINISHELL_B))$
#$(addprefix srcs/backend, $(MINISHELL_B))$
$
OBJ = $(MINI_SRC:.c=.o)$
$
.c.o: $
	@$(CC) $(FLAGS) -c $< -o $(<:.c=.o)$
$
all: $(NAME)$
$
run: re all$
	@./minishell$
$
bonus: $(NAME)$
$
$(LIBFT):$
	@make -C $(LIBFT_DIR)$
$
$(NAME): $(LIBFT) $(OBJ)$
	@$(CC) $(OBJ) -o $(NAME) -L $(LIBFT_DIR) -lft -lreadline$
	@echo "$(NAME) compiled successfully!"$
$
clean:$
	@make -C $(LIBFT_DIR) clean$
	@$(RM) $(OBJ) $(BONUS_OBJ)$
	@echo "Object files removed"$
$
fclean: clean$
	@make -C $(LIBFT_DIR) fclean > /dev/null$
	@$(RM) $(NAME) checker$
	@echo "Binary files and Libft removed"$
$
re: fclean all$
$
norminette:$
	@make -C $(LIBFT_DIR) norminette$
	@-norminette srcs | grep -E --color=always "Error" || echo "Norminette: Everything is fine!"$
$
.PHONY: all clean fclean re bonus norminetteblablabla$
blabakjlds$
EOF$
blablablabla$
iseugkhjlkjSDBV$
LKSJDDbfh;kDDBS$
