Update SHLVL

/* ---------------------------------- */
          This is for cd

[cd //] I dont even know if we are supposed to do that
/* ---------------------------------- */

/* ---------------------------------- */
          This is for echo

[echo -n -n] Should skip all of the -n I think
[echo -n -n Hola] Should skip all of the -n I think
[echo -nnnnnnnnnnnnnnnnnnnnnnnnnnnnn] Should act as if -n
[echo -n -nnn -nnnn] combination of both above
[echo -n -nnn hola -nnnn] still the same.
[echo -nnnnnnnn ----------------n] still.

	Special case, need to talk this one.
[echo $?]
/* ---------------------------------- */

/* ---------------------------------- */
			This is for the parser

[echo $:$= | cat -e] Doesnt stop the str for the search of env.
[echo my shit terminal is [$TERM]] Doesnt stop the str for the search of env.
[echo my shit terminal is [$TERM4]] Same as before.
[echo $9HOME] Still the same thing.
[echo $HOME%] Same as before.
[echo $UID] I think this is a special case.
[echo > <] Should put an error of parsing.
/*
	$> echo > <				OK	OK	bash: syntax error near unexpected token `<'
	$>	2	
	132
		$> echo | |				OK	OK	bash: syntax error near unexpected token `|'
	$>	2	
	133
		$> EechoE				OK	OK	bash: EechoE: command not found
	$>	127	
	134
		$> .echo.				OK	OK	bash: .echo.: command not found
	$>	127	
	135
		$> >echo>				OK	OK	bash: syntax error near unexpected token `newline'
	$>	2	
	136
		$> <echo<				OK	OK	bash: syntax error near unexpected token `newline'
	$>	2	
	137
		$> >>echo>>				OK	OK	bash: syntax error near unexpected token `newline'
	$>	2	
	138
		$> |echo|				OK	OK	bash: syntax error near unexpected token `|'
	$>	2	
	139
		$> |echo -n hola				OK	OK	bash: syntax error near unexpected token `|'
	$>
*/


/* ---------------------------------- */

your_command > stdout.txt 2> stderr.txt ??

What does the subject mean by 'Not interpret' ?
-> echo \n hola ?
-> echo \$HOME


BIG BOSS A TESTER :
""''echo hola""'''' que""'' tal""''

/./../../../../..
/////////////////////////////

| hola
|||||

exit(127)

echo : if ~ followed by a / or by nothing, print $HOME instead of ~
actually not in echo but in the parsing xDDDD -> good !
echo hello'world' -> good 
echo "$" -> good 
echo '' -> good 

parsing interprets '\' while it shouldn't
env|grep PWD
parsing : "                             "
">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
"<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
> or < or >> or << with nothing after, should probably write smth

$?

> test

==5207== 6 bytes in 1 blocks are definitely lost in loss record 1 of 67
==5207==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==5207==    by 0x10B256: ft_split2 (split2.c:95)
==5207==    by 0x10A4DB: fill_exe (parseur.c:96)
==5207==    by 0x10A8BF: pars_line (parseur.c:133)
==5207==    by 0x10A9C0: parseur (parseur.c:150)
==5207==    by 0x109B84: main (main.c:60)